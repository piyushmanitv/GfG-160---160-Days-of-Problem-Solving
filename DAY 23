Count Inversions


Difficulty: MediumAccuracy: 16.93%Submissions: 649K+Points: 4


Given an array of integers arr[]. Find the Inversion Count in the array.
Two elements arr[i] and arr[j] form an inversion if arr[i] > arr[j] and i < j.

Inversion Count: For an array, inversion count indicates how far (or close) the array is from being sorted. If the array is already sorted then the inversion count is 0.
If an array is sorted in the reverse order then the inversion count is the maximum. 








class Solution {
  public:
    // Function to count inversions in the array.
    int countAndMerge(vector<int>& arr, int l, int m, int r){
        
        int n1 = m - l + 1, n2 = r - m;
        
        vector<int> left(n1), right(n2);
        for(int i = 0; i < n1; i++)
            left[i] = arr[i + l];
        for(int j = 0; j < n2; j++)
            right[j] = arr[m + 1 +j];
            
        int res = 0;
        int i = 0, j = 0, k = l;
        while(i < n1 && j < n2){
            if(left[i] <= right[j])
            arr[k++] = left[i++];
            else{
                arr[k++] = right[j++];
                res += (n1 - i);
            }
        }
        
        while(i < n1)
            arr[k++] = left[i++];
        while(j < n2)
            arr[k++] = right[j++];
            
        return res;
    }
    
    
    int countInv(vector<int>& arr, int l, int r){
        int res = 0;
        if(l < r){
            int m = l + (r - l)/2;
            
            res += countInv(arr, l, m);
            res += countInv(arr, m + 1, r);
            res += countAndMerge(arr, l, m, r);
        }
        return res;
    }
    
    int inversionCount(vector<int> &arr) {
        // Your Code Here
        int n = arr.size();
        return countInv(arr, 0 , n -1);
    }
};

