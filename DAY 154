Minimum Weight Cycle
Difficulty: HardAccuracy: 57.0%Submissions: 15K+Points: 8
Given an undirected, weighted graph with V vertices numbered from 0 to V-1 and E edges, 
represented by a 2d array edges[][], where edges[i] = [u, v, w] represents the edge 
between the nodes u and v having w edge weight.
Your task is to find the minimum weight cycle in this graph.










class Solution {
  public:
    int findMinCycle(int V, vector<vector<int>>& edges) {
        vector<vector<pair<int, int>>> graph(V);
        for (auto& edge : edges) {
            int u = edge[0], v = edge[1], w = edge[2];
            graph[u].push_back({v, w});
            graph[v].push_back({u, w});
        }
        
        int minCycle = INT_MAX;
        
        for (auto& edge : edges) {
            int u = edge[0], v = edge[1], w = edge[2];
            
           
            vector<int> dist(V, INT_MAX);
            dist[u] = 0;
            priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
            pq.push({0, u});
            
            while (!pq.empty()) {
                int d = pq.top().first;
                int node = pq.top().second;
                pq.pop();
                
                if (d > dist[node]) continue;
                
                for (auto& neighbor : graph[node]) {
                    int neighborNode = neighbor.first;
                    int weight = neighbor.second;
                    
                    if ((node == u && neighborNode == v) || (node == v && neighborNode == u)) continue;
                    
                    if (dist[neighborNode] > dist[node] + weight) {
                        dist[neighborNode] = dist[node] + weight;
                        pq.push({dist[neighborNode], neighborNode});
                    }
                }
            }
            
            if (dist[v] != INT_MAX) {
                minCycle = min(minCycle, dist[v] + w);
            }
        }
        
        return minCycle == INT_MAX ? -1 : minCycle;
    }
};
