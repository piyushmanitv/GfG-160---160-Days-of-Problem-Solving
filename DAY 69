Add Number Linked Lists
Difficulty: MediumAccuracy: 34.52%Submissions: 336K+Points: 4Average Time: 30m
Given the head of two singly linked lists num1 and num2 representing two non-negative integers. The task is to return the head of the linked list representing the sum of these two numbers.

For example, num1 represented by the linked list : 1 -> 9 -> 0, similarly num2 represented by the linked list: 2 -> 5. Sum of these two numbers is represented by 2 -> 1 -> 5.

Note: There can be leading zeros in the input lists, but there should not be any leading zeros in the output list.








/* node for linked list:

struct Node {
    int data;
    struct Node* next;
    Node(int x) {
        data = x;
        next = NULL;
    }
};

*/

class Solution {
    struct SumResult{
        Node* node;
        int carry;
        SumResult(Node* n, int c) : node(n), carry(c){}
    };
    
    int getLength(Node* head){
        int len = 0;
        while(head){
            len++;
            head = head->next;
        }
        return len;
    }
    
    Node* padZeros(Node* head, int count){
        while(count--){
            Node* temp = new Node(0);
            temp->next = head;
            head = temp;
        }
        return head;
    }
    
    SumResult addHelper(Node* l1, Node* l2){
        if(!l1 && !l2) return SumResult(nullptr, 0);
        
        SumResult next = addHelper(l1->next, l2->next);
        int total = l1->data + l2->data + next.carry;
        Node* current = new Node(total % 10);
        current->next = next.node;
        return SumResult(current, total / 10);
    }
    
    Node* removeLeadingZero(Node* head){
        while(head && head->data == 0 && head->next){
            Node* temp = head;
            head = head->next;
            delete temp;
        }
        return head;
    }
    
public:
    
    Node* addTwoLists(Node* num1, Node* num2){
        int len1 = getLength(num1);
        int len2 = getLength(num2);
        
        if(len1 < len2)
            num1 = padZeros(num1, len2 - len1);
        else
            num2 = padZeros(num2, len1 - len2);
            
        SumResult res = addHelper(num1, num2);
        Node* resultHead = res.node;
        
        if(res.carry){
            Node* newHead = new Node(res.carry);
            newHead->next = resultHead;
            resultHead = newHead;
            }
    return removeLeadingZero(resultHead);
    }
};
