Longest Palindrome in a String
Difficulty: MediumAccuracy: 23.2%Submissions: 335K+Points: 4
Given a string s, your task is to find the longest palindromic substring within s.

A substring is a contiguous sequence of characters within a string, defined as s[i...j] where 0 ≤ i ≤ j < len(s).

A palindrome is a string that reads the same forward and backward. More formally, s is a palindrome if reverse(s) == s.

Note: If there are multiple palindromic substrings with the same length, return the first occurrence of the longest palindromic substring from left to right.










class Solution {
  public:
    string longestPalindrome(string s) {
        // code here
         int n=s.size();
        int index=-1,length=-1;
        
        vector<vector<int>> dp(n,vector<int> (n,0));
        
        for(int len=0;len<n;len++){
            int i,j;
            for(i=0,j=i+len ;j<n ;i++,j++){
                if(i==j)
                    dp[i][j]=1;
                else if(i+1==j && s[i]==s[j])
                    dp[i][j]=1;
                else if(s[i]==s[j] && dp[i+1][j-1])
                    dp[i][j]=1;

                
                
                if(dp[i][j] && (j-i+1)>length){
                    index=i;
                    length=j-i+1;
                }
                
            
            
                
            }
            
        }
        
    
        return s.substr(index,length);
    }
};
