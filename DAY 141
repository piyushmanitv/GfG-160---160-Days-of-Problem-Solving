Undirected Graph Cycle
Difficulty: MediumAccuracy: 30.13%Submissions: 623K+Points: 4Average Time: 20m
Given an undirected graph with V vertices and E edges, represented as a 2D vector edges[][], where each entry 
edges[i] = [u, v] denotes an edge between vertices u and v, determine whether the graph contains a cycle or not. 
The graph can have multiple component.







class Solution {
 public:
    bool isCycle(int V, vector<vector<int>>& edges) {
        vector<vector<int>> adj(V);
        
        for(auto &e : edges) {
            int u = e[0], v = e[1];
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
            
        vector<char> visited(V, 0);    
            
        function<bool(int, int)> dfs = [&](int u, int p) -> bool {
            visited[u] = 1;
            
            for(int v : adj[u]) {
                if(v == p) continue;
                if(!visited[v]){
                    if(dfs(v, u)) return true;
                } else {
                    return true;
                }
            }
            return false;
        };
        
        for(int i = 0; i < V; ++i){
            if(!visited[i]){
                if(dfs(i, -1)) return true;
            }
        }        
        
        return false;
    }
};

