Serialize and deserialize a binary tree
Difficulty: MediumAccuracy: 51.67%Submissions: 98K+Points: 4Average Time: 45m
Serialization is to store a tree in an array so that it can be later restored and deserialization is reading tree back from the array. Complete the functions

serialize() : stores the tree into an array a and returns the array.
deSerialize() : deserializes the array to the tree and returns the root of the tree.
Note: Multiple nodes can have the same data and the node values are always positive integers. Your code will be correct if the tree returned by 
deSerialize(serialize(input_tree)) is same as the input tree. Driver code will print the in-order traversal of the tree returned by deSerialize(serialize(input_tree)).










/* A binary tree node has data, pointer to left child
   and a pointer to right child
struct Node
{
    int data;
    Node* left;
    Node* right;
}; */

class Solution {
public:
    vector<int> serialize(Node* root){
        vector<int> arr;
        in(root, arr);
        return arr;
    }
    
    Node* deSerialize(vector<int>& arr){
        return bsthelper(arr, 0 , arr.size() - 1);
    }
    
    
private:
    void in(Node* root, vector<int>& arr){
        if(!root) return;
        in(root->left, arr);
        arr.push_back(root->data);
        in(root->right, arr);
    }
    
    Node* bsthelper(vector<int>& arr, int start, int end){
        if(start > end) return nullptr;
        int mid = (start + end) / 2;
        Node* root = new Node(arr[mid]);
        root->left = bsthelper(arr, start, mid - 1);
        root->right = bsthelper(arr, mid + 1, end);
        return root;
    }
};
