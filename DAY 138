DFS of Graph
Difficulty: EasyAccuracy: 63.07%Submissions: 362K+Points: 2Average Time: 5m
Given a connected undirected graph containing V vertices represented by a 2-d adjacency list adj[][], where each adj[i] represents the list of vertices connected to vertex i. Perform a Depth First Search (DFS) traversal starting from vertex 0, visiting vertices from left to right as per the given adjacency list, and return a list containing the DFS traversal of the graph.

Note: Do traverse in the same order as they are in the given adjacency list.










class Solution {
public:
        void dfs(int i, vector<vector<int>> &adj, vector<int> &ans, unordered_map<int, bool> &visited){
        ans.push_back(i);
        visited[i] = true;
        
        for(auto z : adj[i]){
            if(!visited[z]){
                dfs(z, adj, ans, visited);
            }
            
        }
        return;
    }
    vector<int> dfs(vector<vector<int>>& adj) {
        // Code here
        vector<int> ans;
        unordered_map<int, bool> visited;
        dfs(0, adj, ans, visited);
        return ans;
    }
};
