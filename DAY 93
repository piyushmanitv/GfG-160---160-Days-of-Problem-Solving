Lowest Common Ancestor in a BST
Difficulty: EasyAccuracy: 65.2%Submissions: 174K+Points: 2Average Time: 20m
Given a Binary Search Tree (with all values unique) and two nodes n1 and n2 (n1 != n2). You may assume that both nodes exist in the tree. Find the Lowest Common Ancestor (LCA) of the given two nodes in the BST.

LCA between two nodes n1 and n2 is defined as the lowest node that has both n1 and n2 as descendants (where we allow a node to be a descendant of itself).














/*
// Tree Node
class Node {
  public:
    int data;
    Node* left;
    Node* right;

    // Constructor to initialize a new node
    Node(int val) {
        data = val;
        left = NULL;
        right = NULL;
    }
};
*/

class Solution {
  public:
    Node* LCA(Node* root, Node* n1, Node* n2) {
        // code here
        if(!root || root==n1 || root==n2) return root;
        Node* lft=LCA(root->left, n1, n2);
        Node* rgt=LCA(root->right, n1, n2);
        if(!lft) return rgt;
        else if(!rgt) return lft;
        else return root;
    }
};
