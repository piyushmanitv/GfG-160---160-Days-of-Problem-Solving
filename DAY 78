Solve the Sudoku
Difficulty: HardAccuracy: 37.98%Submissions: 121K+Points: 8Average Time: 60m
Given an incomplete Sudoku configuration in terms of a 9x9  2-D interger square matrix, mat[][], the task is to solve the Sudoku. It is guaranteed that the input Sudoku will have exactly one solution.

A sudoku solution must satisfy all of the following rules:

Each of the digits 1-9 must occur exactly once in each row.
Each of the digits 1-9 must occur exactly once in each column.
Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.
Note: Zeros represent blanks to be filled with numbers 1-9, while non-zero cells are fixed and cannot be changed.









class Solution {
  public:
    bool row[9][10]{}, col[9][10]{}, box[9][10]{};
    
    bool solve(vector<vector<int>> &mat, int r = 0, int c = 0){
        if(r == 9) return true;
        if(c == 9) return solve(mat, r + 1, 0);
        if(mat[r][c]) return solve(mat, r, c + 1);
        
        for(int d = 1; d <= 9; ++d){
            int b = (r/3)* 3 + c/3;
            if(!row[r][d] && !col[c][d] && !box[b][d]){
                mat[r][c] = d;
                row[r][d] = col[c][d] = box[b][d] = true;
                
                if(solve(mat, r, c + 1)) return true;
                
                mat[r][c] = 0;
                row[r][d] = col[c][d] = box[b][d] = false;
            }
        }
        return false;
    }
    // Function to find a solved Sudoku.
    void solveSudoku(vector<vector<int>> &mat) {
        // code here
        for(int r = 0; r < 9; ++r)
            for(int c = 0; c < 9; ++c)
                if(mat[r][c]){
                    int d = mat[r][c], b = (r/3)* 3 + c /3;
                    row[r][d] = col[c][d] = box[b][d] = true;
                }
        solve(mat);
    }
};
