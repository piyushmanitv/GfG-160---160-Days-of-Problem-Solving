0 - 1 Knapsack Problem
Difficulty: MediumAccuracy: 31.76%Submissions: 508K+Points: 4
Given n items, each with a specific weight and value, and a knapsack with a capacity of W, the task is to put the items in the knapsack such that the sum of weights of the items <= W and the sum of values associated with them is maximized. 

Note: You can either place an item entirely in the bag or leave it out entirely. Also, each item is available in single quantity.







class Solution {
  public:
    int knapsack(int W, vector<int> &val, vector<int> &wt) {
        // code here
        int n=wt.size();
        vector<int>prev(W+1, 0), curr(W+1, 0);
        for(int i=1; i<=n; i++){
            for(int w=0; w<=W; w++){
                if(wt[i-1]<=w) curr[w]=max(val[i-1]+prev[w-wt[i-1]], prev[w]);
                else curr[w]=prev[w];
            }
            prev=curr;
        }
        return prev[W];
    }
};
