Topological sort
Difficulty: MediumAccuracy: 56.52%Submissions: 311K+Points: 4Average Time: 15m
Given a Directed Acyclic Graph (DAG) of V (0 to V-1) vertices and E edges represented as a 2D list of edges[][], where each entry edges[i] = [u, v] denotes a directed edge u -> v. Return the topological sort for the given graph.

Topological sorting for Directed Acyclic Graph (DAG) is a linear ordering of vertices such that for every directed edge u -> v, vertex u comes before v in the ordering.
Note: As there are multiple Topological orders possible, you may return any of them. If your returned Topological sort is correct then the output will be true else false.










class Solution {
  public:
    vector<int> topoSort(int V, vector<vector<int>>& edges) {
        vector<vector<int>> adj(V);
        vector<int> freq(V,0);
        
        for(auto x : edges){
            adj[x[0]].push_back(x[1]);
            freq[x[1]]++;
            
        }
        queue<int> q;
        for(int i=0;i<V;i++){
            if(freq[i]==0)
                q.push(i);
            
        }
        vector<int> ans;
        while(!q.empty()){
            int z = q.front();
            q.pop();
            ans.push_back(z);
            
            for(auto xx : adj[z]){
                freq[xx]--;
                if(freq[xx]==0)
                    q.push(xx);
            }
            
        }
        return ans;
    }
};
