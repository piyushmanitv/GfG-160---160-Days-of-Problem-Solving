Rotate a Linked List
Difficulty: MediumAccuracy: 39.95%Submissions: 291K+Points: 4Average Time: 30m
Given the head of a singly linked list, your task is to left rotate the linked list k times.









/*

struct Node {
    int data;
    struct Node *next;
    Node(int x) {
        data = x;
        next = NULL;
    }
};

*/

class Solution {
  public:
    Node* rotate(Node* head, int k) {
        // Your code here
        if(!head || k == 0) return head;
        
        Node* curr = head;
        int len = 1;
        while(curr->next){
            curr = curr->next;
            len++;
        }
        curr->next = head;
        
        k %= len;
        
        if(k == 0){
            curr->next = nullptr;
            return head;
        }
        
        Node* new_tail = head;
        for(int i = 1; i < k; i++){
            new_tail = new_tail->next;
        }
         
         Node* new_head = new_tail->next;
         new_tail->next = nullptr;
         
        return new_head;
    }
};
